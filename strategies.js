strategies = {"AdvisorBM":"{\n  name: 'AdvisorBM'\n  requires: ['Advisor']\n  gainPriority: (state, my) -> [\n    \"Province\"\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Gold\"\n    \"Advisor\"\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n","BM_Library":"{\n  name: 'BM Library'\n  requires: ['Library']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Library\"\n    \"Silver\"\n  ]\n}\n","BM_Masquerade":"# ehunt described this strategy in words on the Dominion Strategy Forum,\n# describing it as a \"fun, if sobering, experiment\" to play Masquerade\n# completely algorithmically in a real game.\n#\n# \"Do not try to tweak big money masquerade. Instead, let big money\n# masquerade tweak you.\"\n{\n  name: 'BM Masquerade'\n  requires: ['Masquerade']\n  author: 'ehunt'\n  gainPriority: (state, my) -> \n    [\n      \"Province\"\n      \"Gold\"\n      \"Duchy\" if state.gainsToEndGame() <= 5\n      \"Masquerade\" if my.countInDeck(\"Masquerade\") == 0\n      \"Silver\"\n    ]\n}\n\n","BankWharf":"# Play Big Money including Banks, except buy Wharf with every $5 buy.\n{\n  name: 'BankWharf'\n  author: 'Geronimoo' #tweaked by Jorbles\n  requires: ['Bank', 'Wharf']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Duchy\" if state.gainsToEndGame() <= 4\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Bank\"\n    \"Gold\"\n    \"Wharf\"\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n","BeggarGardens":"{\n  name: 'BeggarGardens'\n  author: 'ragingduckd', 'DStu'\n  requires: ['Beggar', 'Gardens']\n  \n  gainPriority: (state, my) ->  \n    if state.supply[\"Rebuild\"]?\n      if my.turnsTaken < 3 or state.countInSupply(\"Rebuild\") < 10\n        return this.gainPriorityRebuild(state, my)\n      else\n        return this.gainPriorityDefault(state, my)\n    else\n      return this.gainPriorityDefault(state, my)\n  \n  gainPriorityRebuild: (state, my) -> [\n    \"Province\"\n    \"Duchy\"\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Beggar\" if my.countInDeck(\"Beggar\") < 2\n    \"Gardens\"\n    \"Duchy\"\n    \"Beggar\"\n    \"Estate\"\n    \"Copper\"\n  ]\n  \n  gainPriorityDefault: (state, my) -> [\n    \"Gardens\"\n    \"Duchy\"\n    \"Estate\" if state.gainsToEndGame() <= 4\n    \"Beggar\"\n    \"Silver\"\n    \"Estate\"\n    \"Copper\"\n  ]\n  \n  wantsToDiscardBeggar: (state, my) ->\n    if my.countInHand(\"Beggar\") > 1\n      return true\n    else\n      return false\n}\n","BigEnvoy":"{\n  name: 'BigEnvoy'\n  requires: ['Envoy']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 \\\n               or state.countInSupply(\"Province\") <= 6\n    \n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Envoy\" if my.countInDeck(\"Envoy\") < 1\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n\n","BigJourneyman":"{\n  name: 'BigJourneyman'\n  requires: ['Journeyman']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 \\\n               or state.countInSupply(\"Province\") <= 6\n    \n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Journeyman\" if my.countInDeck(\"Journeyman\") < 2 \\\n                 and my.numCardsInDeck() >= 18\n    \"Journeyman\" if my.countInDeck(\"Journeyman\") < 1\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n\n  wantsToJM: (state, my) -> \n    #my.draw.length >= 3\n    true\n\n  skipPriority: (state, my) -> [\n    \"Copper\" if my.getTotalMoney() / my.numCardsInDeck() > 1\n    \"Province\" if my.countInDeck(\"Province\") > my.countInDeck(\"Duchy\") \\\n               and my.countInDeck(\"Province\") > my.countInDeck(\"Estate\") \n    \"Duchy\" if my.countInDeck(\"Duchy\") > my.countInDeck(\"Estate\") \n    \"Estate\"\n  ]\n}\n\n","BigMoney":"# This is an implementation of the pure Big Money strategy, updated\n# based on WanderingWinder's forum posts:\n# http://forum.dominionstrategy.com/index.php?topic=625\n{\n  name: 'Big Money'\n  author: 'WanderingWinder'\n  requires: []\n  gainPriority: (state, my) -> \n    if state.supply.Colony?\n      [\n        \"Colony\" if my.getTotalMoney() > 32\n        \"Province\" if state.gainsToEndGame() <= 6\n        \"Duchy\" if state.gainsToEndGame() <= 5\n        \"Estate\" if state.gainsToEndGame() <= 2\n        \"Platinum\"\n        \"Province\" if state.countInSupply(\"Colony\") <= 7\n        \"Gold\"\n        \"Duchy\" if state.gainsToEndGame() <= 6\n        \"Silver\"\n        \"Copper\" if state.gainsToEndGame() <= 2\n      ]\n    else\n      [\n        \"Province\" if my.getTotalMoney() > 18\n        \"Duchy\" if state.gainsToEndGame() <= 4\n        \"Estate\" if state.gainsToEndGame() <= 2\n        \"Gold\"\n        \"Duchy\" if state.gainsToEndGame() <= 6\n        \"Silver\"\n      ]\n}\n\n","BigMoneyBaker":"#strategy to test the Baker, NOT optimized\n{\n  name: 'Big Money-Baker'\n  author: 'DStu'\n  requires: ['Baker']\n  gainPriority: (state, my) -> [\n    \"Province\" if my.getTotalMoney() > 18\n    \"Duchy\" if state.gainsToEndGame() <= 4\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Gold\"\n    \"Baker\"\n    \"Silver\"\n  ]\n}\n\n","BigNothing":"# This is an implementation of the pure Big Money strategy, updated\n# based on WanderingWinder's forum posts:\n# http://forum.dominionstrategy.com/index.php?topic=625\n{\n  name: 'Big Nothing'\n  requires: []\n  gainPriority: (state, my) -> \n    if state.supply.Colony?\n      [\n      ]\n    else\n      [\n      ]\n}\n\n","BigSmithy":"{\n  name: 'BigSmithy'\n  requires: ['Smithy']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 \\\n               or state.countInSupply(\"Province\") <= 6\n    \n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Smithy\" if my.countInDeck(\"Smithy\") < 2 \\\n             and my.numCardsInDeck() >= 16\n    \"Smithy\" if my.countInDeck(\"Smithy\") < 1\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n\n","ChapelMountebank":"# Gain one Chapel and one Mountebank, and otherwise play Big Money.\n{\n  name: 'ChapelMountebank'\n  requires: ['Chapel', 'Mountebank']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Mountebank\" if my.countInDeck(\"Mountebank\") == 0\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \n    # If this bot somehow gets rid of its chapel later in the game,\n    # it won't try to acquire another one.\n    \"Chapel\" if my.coins <= 3 and my.countInDeck(\"Chapel\") == 0 and my.turnsTaken <= 2\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n","ChapelWitch":"# Gain one Chapel and one Witch, and otherwise play Big Money. One of the most\n# powerful two-card strategies there is.\n{\n  name: 'ChapelWitch'\n  requires: ['Chapel', 'Witch']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Witch\" if my.countInDeck(\"Witch\") == 0\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \n    # If this bot somehow gets rid of its chapel later in the game,\n    # it won't try to acquire another one.\n    \"Chapel\" if my.coins <= 3 and my.countInDeck(\"Chapel\") == 0 and my.turnsTaken <= 2\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n\n  trashPriority: (state, my) -> [\n    \"Curse\"\n    \"Estate\" if state.gainsToEndGame() > 4\n    \"Copper\" if my.getTotalMoney() > 4\\\n             and not (my.countInDeck(\"Witch\") == 0 and my.getTreasureInHand() == 5)\n    \"Estate\" if state.gainsToEndGame() > 2\n  ]\n\n}\n","ChapelYoungWitch":"{\n  name: 'ChapelYoungWitch'\n  requires: ['Chapel', 'Young Witch']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Young Witch\" if my.countInDeck(\"Young Witch\") == 0\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \n    # If this bot somehow gets rid of its chapel later in the game,\n    # it won't try to acquire another one.\n    \"Chapel\" if my.coins <= 3 and my.countInDeck(\"Chapel\") == 0 and my.turnsTaken <= 2\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n\n  trashPriority: (state, my) -> [\n    \"Curse\"\n    \"Estate\" if state.gainsToEndGame() > 4\n    \"Copper\" if my.getTotalMoney() > 4\\\n             and not (my.countInDeck(\"Witch\") == 0 and my.getTreasureInHand() == 5)\n    \"Estate\" if state.gainsToEndGame() > 2\n  ]\n\n}\n","Develop":"# This Bot does not win anything, but it demonstrates how to configure Develop...\n# Feel free to write a Develop-bot that wins...\n{\n  name: 'Develop'\n  author: 'DStu'\n  requires: [\"Develop\", \"Talisman\", \"Festival\", \"Watchtower\", \"Oasis\"]\n  gainPriority: (state, my) -> [\n     \"Province\" if my.getTotalMoney() > 18\n     \"Talisman\" if my.countInDeck(\"Talisman\") < 2 and my.countInDeck(\"Develop\") > 0\n     \"Festival\" if my.countInDeck(\"Festival\") < 1\n     \"Oasis\" if my.countInDeck(\"Oasis\") < 1\n     \"Develop\" if my.countInDeck(\"Develop\") < 1\n     \"Watchtower\" if my.countInDeck(\"Watchtower\") < 2\n     \"Festival\"\n     \"Oasis\"\n    ]\n    \n  developPriority: (state, my) -> [\n    [\"Talisman\", [\"Festival\", \"Watchtower\"]]\n    [\"Estate\", [\"Oasis\", null]]\n    [\"Copper\", [null, null]]\n  ]\n  \n  actionPriority: (state, my) -> [\n   \"Festival\"\n   \"Oasis\"\n   \"Watchtower\" if (my.actions > 1 and my.hand.length < 5)\n   \"Develop\" if my.countInHand(\"Talisman\") > 1\n   \"Develop\" if my.countInHand(\"Estate\") > 1\n   \"Develop\" if my.countInHand(\"Copper\") > 1\n   \"Watchtower\"\n  ]\n    \n  discardPriority: (state, my) -> [\n    \"Province\"\n    \"Duchy\"\n    \"Estate\" \n    \"Copper\"\n    \"Develop\" \n    \"Talisman\"  \n    \"Silver\"\n    \"Watchtower\"\n    \"Festival\"\n    \"Gold\"\n  ]\n}\n","DoubleAmbassador":"{\n  name: 'Double Ambassador'\n  author: 'rspeer'\n  requires: ['Ambassador']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Ambassador\" if my.countInDeck(\"Ambassador\") < 2\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n\n  discardPriority: (state, my) -> [\n    \"Colony\"\n    \"Duchy\"\n    \"Province\"\n    \"Ambassador\" if my.countInHand(\"Ambassador\") > 1\n    \"Estate\" if my.countInHand(\"Ambassador\") == 0 \\\n             or state.gainsToEndGame <= 5\n    \"Curse\" if my.countInHand(\"Ambassador\") == 0 \\\n            or state.gainsToEndGame <= 5\n    \"Copper\"\n    \"Estate\"\n    \"Curse\"\n    null\n    \"Silver\"\n  ]\n}\n","DoubleGhostShip":"{\n  name: 'DoubleGhostShip'\n  requires: ['Ghost Ship']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 and my.countInDeck(\"Gold\") > 0\n    \"Ghost Ship\" if my.countInDeck(\"Ghost Ship\") < 2\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Silver\"\n  ]\n}\n","DoubleGoons":"{\n  name: 'DoubleGoons'\n  requires: ['Goons']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Goons\" if my.countInDeck(\"Goons\") < 2\n    \"Gold\"\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 4 \\\n             and my.countInPlay(\"Goons\") > 0\n  ]\n}\n","DoubleJack":"# Buys two Jacks of All Trades and otherwise plays a version of Big Money.\n#\n# This has no Colony rules, because it would be a terrible strategy in\n# Colony games.\n{\n  name: 'DoubleJack'\n  author: 'rspeer'\n  requires: [\"Jack of All Trades\"]\n  gainPriority: (state, my) -> [\n    \"Province\" if my.getTotalMoney() > 15\n    \"Duchy\" if state.gainsToEndGame() <= 5\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Gold\"\n    \"Jack of All Trades\" if my.countInDeck(\"Jack of All Trades\") < 2\n    \"Silver\"\n  ]\n}\n","DoubleMilitia":"{\n  name: 'DoubleMilitia'\n  requires: ['Militia']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Militia\" if my.countInDeck(\"Militia\") < 2\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n","DoubleMountebank":"{\n  name: 'DoubleMountebank'\n  requires: ['Mountebank']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 and my.countInDeck(\"Gold\") > 0\n    \"Duchy\" if state.gainsToEndGame() <= 5\n    \"Mountebank\" if my.countInDeck(\"Mountebank\") < 2\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Silver\"\n  ]\n}\n","DoubleWitch":"{\n  name: 'DoubleWitch'\n  requires: ['Witch']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 and my.countInDeck(\"Gold\") > 0\n    \"Witch\" if my.countInDeck(\"Witch\") < 2\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Silver\"\n  ]\n}\n","DrunkMarineStudents":"{\r\n  name: 'Drunk Marine Students'\r\n  author: 'Geronimoo'\r\n  requires: ['Potion', 'University', 'Vineyard', 'Wharf', 'Alchemist', 'Bazaar', 'Wharf']\r\n  gainPriority: (state, my) -> [\r\n    \"Vineyard\" if my.numActionCardsInDeck() > 11\r\n    \"Province\"\r\n    \"Duchy\" if state.countInSupply(\"Province\") <= 2\r\n    \"Estate\" if state.countInSupply(\"Province\") <= 1\r\n    \"University\" if my.countInDeck(\"University\") < 3\r\n    \"Wharf\" if my.countInDeck(\"University\") + my.countInDeck(\"Bazaar\") > my.countInDeck(\"Wharf\")\r\n    \"Scrying Pool\" if my.numActionCardsInDeck() > 3\r\n    \"Alchemist\"\r\n    \"Bazaar\"\r\n    \"Potion\" if my.countInDeck(\"Potion\") < 3\r\n    \"Silver\"\r\n  ]\r\n}","DrunkenMarineStudents":"{\n  name: 'Drunk Marine Students'\n  author: 'Geronimoo'\n  requires: ['Potion', 'University', 'Vineyard', 'Wharf', 'Alchemist', 'Bazaar', 'Wharf']\n  gainPriority: (state, my) -> [\n    \"Vineyard\" if my.numActionCardsInDeck() > 11\n    \"Province\"\n    \"Duchy\" if state.countInSupply(\"Province\") <= 2\n    \"Estate\" if state.countInSupply(\"Province\") <= 1\n    \"University\" if my.countInDeck(\"University\") < 3\n    \"Wharf\" if my.countInDeck(\"University\") + my.countInDeck(\"Bazaar\") > my.countInDeck(\"Wharf\")\n    \"Scrying Pool\" if my.numActionCardsInDeck() > 3\n    \"Alchemist\"\n    \"Bazaar\"\n    \"Potion\" if my.countInDeck(\"Potion\") < 3\n    \"Silver\"\n  ]\n}\n","KCWharf":"# Buy Wharf with every $5 and King's Court with every $7. Probably not\n# optimized.\n{\n  name: 'KCWharf'\n  author: 'rspeer'\n  requires: [\"King's Court\", \"Wharf\"]\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"King's Court\"\n    \"Gold\"\n    \"Wharf\"\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n","LordBottington":"{\n  name: 'LordBottington'\n  requires: ['Rats']\n  gainPriority: (state, my) -> [\n    \"Province\"\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Gold\"\n    \"Rats\" if my.countInDeck(\"Rats\") < 2\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n\n  wantsToPlayRats: (state, my) ->\n    100 * Math.random() < 90\n}\n","MasterpieceFeodum":"#simple version of Masterpiece/Feodum, not optimized but wins against BigMoney+X\n{\n  name: 'MasterpieceFeodum'\n  author: 'DStu'\n  requires: ['Masterpiece', 'Feodum']\n  gainPriority: (state, my) -> [\n    \"Masterpiece\" if my.coins >= 5\n    \"Feodum\" if my.countInDeck(\"Silver\") > 8\n    \"Duchy\" if my.countInDeck(\"Feodum\") > 0\n    \"Estate\" if state.countInSupply(\"Feodum\") == 0\n    \"Silver\"\n    \"Estate\"\n    \"Copper\"\n  ]\n}\n  \n","MoneylenderWitch":"# Not necessarily a good strategy.\n{\n  name: 'MoneylenderWitch'\n  requires: ['Moneylender', 'Witch']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 and my.countInDeck(\"Gold\") > 0\n    \"Witch\" if my.countInDeck(\"Witch\") < 2\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Moneylender\" if my.countInDeck(\"Moneylender\") == 0\n    \"Silver\"\n  ]\n}\n","OBM_Adventurer":"# Optimized version of Big Money + Adventurer\n{\n  name: 'OBM Adventurer'\n  author: 'WanderingWinder'\n  requires: ['Adventurer']\n  gainPriority: (state, my) -> [\n    \"Province\" if my.countInDeck(\"Gold\") > 0\n    \"Duchy\" if state.countInSupply(\"Province\") <= 4\n    \"Estate\" if state.countInSupply(\"Province\") <= 2\n    \"Adventurer\" if state.countInSupply(\"Gold\") > 0 \\\n                 and my.countInDeck(\"Adventurer\") == 0\n    \"Gold\"\n    \"Duchy\" if state.countInSupply(\"Province\") <= 5\n    \"Silver\"\n  ]\n}\n","OBM_Bazaar":"# Optimized version of Big Money + Bazaar\n{\n  name: 'OBM Bazaar'\n  author: 'WanderingWinder'\n  requires: ['Bazaar']\n  gainPriority: (state, my) -> [\n    \"Province\" if my.countInDeck(\"Gold\") > 0\n    \"Duchy\" if state.gainsToEndGame() <= 4\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Gold\"\n    \"Duchy\" if state.gainsToEndGame() <= 5\n    \"Bazaar\"\n    \"Silver\"\n  ]\n}\n\n","OBM_Bridge":"# Optimized version of Big Money + Bridge\n{\n  name: 'OBM Bridge'\n  author: 'WanderingWinder'\n  requires: ['Bridge']\n  gainPriority: (state, my) -> [\n    \"Province\" if my.countInDeck(\"Gold\") > 0\n    \"Duchy\" if state.gainsToEndGame() <= 4\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Gold\"\n    \"Duchy\" if state.gainsToEndGame() <= 6\n    \"Bridge\" if my.countInDeck(\"Bridge\") <= my.countCardTypeInDeck(\"Treasure\") / 10\n    \"Bridge\" if my.countInDeck(\"Bridge\") == 0\n    \"Silver\"\n  ]\n}\n\n","OBM_Chancellor":"{\n  name: 'OBM Chancellor'\n  author: 'rspeer'\n  requires: ['Chancellor']\n  gainPriority: (state, my) -> [\n    \"Province\" if my.getTotalMoney() > 18\n    \"Duchy\" if state.gainsToEndGame() <= 4\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Gold\"\n    \"Duchy\" if state.gainsToEndGame() <= 6\n    \"Chancellor\" if my.countInDeck(\"Chancellor\") < 1\n    \"Silver\"\n  ]\n}\n\n","OBM_Coppersmith":"# Plays Coppersmith on 5/2 starts; plays Big Money otherwise.\n{\n  name: 'OBM Coppersmith'\n  author: 'HiveMindEmulator'\n  requires: ['Coppersmith']\n  gainPriority: (state, my) -> [\n    \"Province\" if my.getTotalMoney() > 18\n    \"Duchy\" if state.gainsToEndGame() <= 4\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Gold\"\n    \"Duchy\" if state.gainsToEndGame() <= 6\n    \"Coppersmith\" if my.numCardsInDeck() == 10 and my.getAvailableMoney() == 5\n    \"Silver\"\n  ]\n}\n\n","OBM_Courtyard":"{\n  name: 'OBM Courtyard'\n  author: 'HiveMindEmulator'\n  requires: ['Courtyard']\n  gainPriority: (state, my) -> [\n    \"Province\" if my.countInDeck(\"Gold\") > 0\n    \"Duchy\" if state.gainsToEndGame() <= 4\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Gold\"\n    \"Duchy\" if state.gainsToEndGame() <= 5\n    \"Silver\" if my.countInDeck(\"Silver\") == 0\n    \"Courtyard\" if my.countInDeck(\"Courtyard\") == 0\n    \"Courtyard\" if my.countInDeck(\"Courtyard\") < my.countCardTypeInDeck(\"treasure\") / 8\n    \"Silver\"\n    \"Courtyard\" if my.countInDeck(\"Courtyard\") <= 1\n  ]\n}\n","OBM_Hunting_Party":"{\n  name: 'OBM Hunting Party'\n  author: 'DG'\n  requires: ['Hunting Party']\n  gainPriority: (state, my) -> [\n    \"Province\" if my.countInDeck(\"Gold\") > 0\n    \"Duchy\" if state.gainsToEndGame() <= 2\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Gold\" if my.countInDeck(\"Gold\") == 0\n    \"Hunting Party\"\n    \"Gold\"\n    \"Estate\" if state.gainsToEndGame() <= 4\n    \"Silver\"\n  ]\n}\n","OBM_Monument":"# Optimized version of Big Money + Monument\n{\n  name: 'OBM Monument'\n  author: 'tko'\n  requires: ['Monument']\n  gainPriority: (state, my) -> [\n    \"Province\" if my.getTotalMoney() > 18\n    \"Duchy\" if state.gainsToEndGame() <= 4\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Gold\"\n    \"Duchy\" if state.gainsToEndGame() <= 5\n    \"Monument\" if my.countInDeck(\"Monument\") < 3\n    \"Silver\"\n  ]\n}\n\n","OBM_Nobles":"{\n  name: 'OBM Nobles'\n  author: 'rspeer'\n  requires: ['Nobles']\n  gainPriority: (state, my) -> [\n    \"Province\"  \n    \"Duchy\" if state.gainsToEndGame() <= 4\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Nobles\" if my.countInDeck(\"Nobles\") < 1\n    \"Nobles\" if state.gainsToEndGame() <= 6\n    \"Gold\"\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 2\n  ]\n}\n","Rebuild":"{\n  name: 'Rebuild' \n  author: 'ragingduckd', 'SheCantSayNo'\n  requires: ['Rebuild']\n  gainPriority: (state, my) -> [\n    \"Province\"\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 2\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 3 and state.countInSupply(\"Rebuild\") == 8\n    \"Duchy\"\n    \"Estate\" if state.gainsToEndGame() <= 1\n    \"Estate\" if state.gainsToEndGame() == 2 and my.ai.getScore(state, my) > -8\n    \"Gold\"\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Rebuild\" if (my.countInDeck(\"Duchy\") > 0 or my.ai.getScore(state, my) > 2)\\\n                and (state.countInSupply(\"Rebuild\") > 2 or my.ai.getScore(state, my) > 3 \\\n                or (state.countInSupply(\"Rebuild\") == 1 and my.ai.getScore(state, my) > 0))\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\n                and my.countInDeck(\"Estate\") == 0 \\\n                and state.countInSupply(\"Duchy\") >= 4\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\n                and state.countInSupply(\"Duchy\") == 0\n    \"Silver\"\n  ]\n\n  getScore: (state, my) -> \n    for status in state.getFinalStatus()\n      [name, score, turns] = status\n      if name == my.ai.toString()\n        myScore = score\n      else\n        opponentScore = score\n    return myScore - opponentScore\n\n  countNotInHand: (my, card) ->\n    return my.countInDeck(card) - my.countInHand(card)\n\n  countInDraw: (my, card) ->\n    return my.countInDeck(card) - my.countInHand(card) - my.countInDiscard(card)\n\n  wantsToRebuild: (state, my) ->\n    if my.countInHand(\"Rebuild\") >= state.countInSupply(\"Province\") \\\n       and my.ai.getScore(state, my) > 0\n          answer = 1\n    else if state.countInSupply(\"Province\") == 1 \\\n            and my.ai.getScore(state, my) < -4\n              answer = 0\n    else if state.countInSupply(\"Duchy\") == 0 \\\n            and my.ai.countNotInHand(my, \"Duchy\") == 0\\\n            and my.ai.getScore(state, my) < 0\n              answer = 0\n    else if my.getTreasureInHand() > 7 and state.countInSupply(\"Province\") == 1\n              answer = 0\n    else\n          answer = state.countInSupply(\"Province\") > 0\n    return answer\n\n  rebuildPriority: (state, my) -> [\n    \"Province\"\n    \"Duchy\"\n    \"Estate\"\n  ]\n\n  nameVPPriority: (state, my) -> [\n    \"Duchy\" if  state.countInSupply(\"Duchy\") > 0 \\\n            and my.ai.countNotInHand(my, \"Estate\") > 0 \\\n            and (my.ai.countNotInHand(my, \"Province\") == 0 \\\n                or  (my.ai.countInDraw(my, \"Province\") == 0 \\\n                    and my.ai.countInDraw(my, \"Duchy\") > 0 \\\n                    and my.ai.countInDraw(my, \"Estate\") > 0))\n    \"Province\" if my.ai.countInDraw(my, \"Estate\") == 0 \\\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\n               and my.ai.countInDraw(my, \"Province\") > 0\n    \"Province\" if my.ai.countNotInHand(my, \"Estate\") == 0 \\\n               and my.ai.countNotInHand(my, \"Duchy\") > 0 \\\n               and my.ai.countNotInHand(my, \"Province\") > 0\n    \"Estate\" if my.countInHand(\"Rebuild\") + 1 >= state.countInSupply(\"Province\") \\\n             and my.ai.getScore(state, my) > 0\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\n             and my.ai.countInDraw(my, \"Province\") == 0\n    \"Province\" if state.countInSupply(\"Duchy\") == 0 \\\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\n               and my.ai.countInDraw(my, \"Province\") > \\\n               my.ai.countInDraw(my, \"Estate\") \n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\n             and my.ai.countInDraw(my, \"Province\") > 0 \\\n             and my.ai.getScore(state, my) > 2\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countNotInHand(my, \"Estate\") > 0 \\\n             and my.ai.countNotInHand(my, \"Duchy\") < 3 \\\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\n             and my.ai.getScore(state, my) > 4\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.countInDeck(\"Duchy\") == 0 \\\n             and my.ai.getScore(state, my) > 0\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countNotInHand(my, \"Duchy\") == 0 \\\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\n             and my.ai.getScore(state, my) > 2\n    \"Province\" if my.ai.countNotInHand(my, \"Province\") > 0\n    \"Estate\"\n  ]\n} ","RebuildDuke":"{\r\n  name: 'RebuildDuke'\r\n  author: 'ragingduckd', 'SheCantSayNo'\r\n  requires: ['Rebuild', 'Duke']\r\n  gainPriority: (state, my) -> [    \r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 2\r\n    \"Duchy\"\r\n    \"Province\"\r\n    \"Duke\"    \r\n    \"Estate\" if my.countInDeck(\"Estate\") ==0 and my.countInDeck(\"Rebuild\") >= 2\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0\r\n    \"Rebuild\"\r\n    \"Silver\"\r\n  ]\r\n\r\n  wantsToRebuild: (state, my) ->\r\n    answer = state.countInSupply(\"Province\") > 0\r\n    return answer\r\n\r\n  rebuildPriority: (state, my) -> [\r\n    \"Duchy\"\r\n    \"Province\"\r\n    \"Duke\"\r\n    \"Estate\"\r\n  ]\r\n\r\n  nameVPPriority: (state, my) -> [\r\n    \"Duchy\"\r\n  ]\r\n}","RebuildDuke2":"{\r\n  name: 'RebuildDuke'\r\n  author: 'ragingduckd', 'SheCantSayNo'\r\n  requires: ['Rebuild', 'Duke']\r\n  gainPriority: (state, my) -> [    \r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 3\r\n    \"Duchy\"\r\n    \"Province\"\r\n    \"Duke\"    \r\n    \"Estate\" if my.countInDeck(\"Estate\") == 0 and my.countInDeck(\"Rebuild\") >= 2\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0\r\n    \"Rebuild\"\r\n    \"Silver\"\r\n  ]\r\n\r\n  wantsToRebuild: (state, my) ->\r\n    answer = state.countInSupply(\"Province\") > 0\r\n    return answer\r\n\r\n  rebuildPriority: (state, my) -> [\r\n    \"Duchy\"\r\n    \"Province\"\r\n    \"Duke\"\r\n    \"Estate\"\r\n  ]\r\n\r\n  nameVPPriority: (state, my) -> [\r\n    \"Duchy\"\r\n  ]\r\n}","RebuildHorse":"{\n  name: 'RebuildHorse'\n  author: 'ragingduckd', 'SheCantSayNo'\n  requires: ['Rebuild', 'Horse Traders']\n  gainPriority: (state, my) -> [\n    \"Province\"\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 2\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 3 and state.countInSupply(\"Rebuild\") == 8\n    \"Duchy\"\n    \"Estate\" if state.gainsToEndGame() <= 1\n    \"Estate\" if state.gainsToEndGame() == 2 and my.ai.getScore(state, my) > -8\n    \"Gold\"\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Rebuild\" if (my.countInDeck(\"Duchy\") > 0 or my.ai.getScore(state, my) > 2)\\\n                and (state.countInSupply(\"Rebuild\") > 2 or my.ai.getScore(state, my) > 3 \\\n                or (state.countInSupply(\"Rebuild\") == 1 and my.ai.getScore(state, my) > 0))\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\n                and my.countInDeck(\"Estate\") == 0 \\\n                and state.countInSupply(\"Duchy\") >= 4\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\n                and state.countInSupply(\"Duchy\") == 0\n    \"Horse Traders\" if my.countInDeck(\"Horse Traders\") < 2\n    \"Silver\"\n  ]\n\n  getScore: (state, my) -> \n    for status in state.getFinalStatus()\n      [name, score, turns] = status\n      if name == my.ai.toString()\n        myScore = score\n      else\n        opponentScore = score\n    return myScore - opponentScore\n\n  countNotInHand: (my, card) ->\n    return my.countInDeck(card) - my.countInHand(card)\n\n  countInDraw: (my, card) ->\n    return my.countInDeck(card) - my.countInHand(card) - my.countInDiscard(card)\n\n  wantsToRebuild: (state, my) ->\n    if my.countInHand(\"Rebuild\") >= state.countInSupply(\"Province\") \\\n       and my.ai.getScore(state, my) > 0\n          answer = 1\n    else if state.countInSupply(\"Province\") == 1 \\\n            and my.ai.getScore(state, my) < -4\n              answer = 0\n    else if state.countInSupply(\"Duchy\") == 0 \\\n            and my.ai.countNotInHand(my, \"Duchy\") == 0\\\n            and my.ai.getScore(state, my) < 0\n              answer = 0\n    else if my.getTreasureInHand() > 7 and state.countInSupply(\"Province\") == 1\n              answer = 0\n    else\n          answer = state.countInSupply(\"Province\") > 0\n    return answer\n\n  rebuildPriority: (state, my) -> [\n    \"Province\"\n    \"Duchy\"\n    \"Estate\"\n  ]\n\n  nameVPPriority: (state, my) -> [\n    \"Duchy\" if  state.countInSupply(\"Duchy\") > 0 \\\n            and my.ai.countNotInHand(my, \"Estate\") > 0 \\\n            and (my.ai.countNotInHand(my, \"Province\") == 0 \\\n                or  (my.ai.countInDraw(my, \"Province\") == 0 \\\n                    and my.ai.countInDraw(my, \"Duchy\") > 0 \\\n                    and my.ai.countInDraw(my, \"Estate\") > 0))\n    \"Province\" if my.ai.countInDraw(my, \"Estate\") == 0 \\\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\n               and my.ai.countInDraw(my, \"Province\") > 0\n    \"Province\" if my.ai.countNotInHand(my, \"Estate\") == 0 \\\n               and my.ai.countNotInHand(my, \"Duchy\") > 0 \\\n               and my.ai.countNotInHand(my, \"Province\") > 0\n    \"Estate\" if my.countInHand(\"Rebuild\") + 1 >= state.countInSupply(\"Province\") \\\n             and my.ai.getScore(state, my) > 0\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\n             and my.ai.countInDraw(my, \"Province\") == 0\n    \"Province\" if state.countInSupply(\"Duchy\") == 0 \\\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\n               and my.ai.countInDraw(my, \"Province\") > \\\n               my.ai.countInDraw(my, \"Estate\") \n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\n             and my.ai.countInDraw(my, \"Province\") > 0 \\\n             and my.ai.getScore(state, my) > 2\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countNotInHand(my, \"Estate\") > 0 \\\n             and my.ai.countNotInHand(my, \"Duchy\") < 3 \\\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\n             and my.ai.getScore(state, my) > 4\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.countInDeck(\"Duchy\") == 0 \\\n             and my.ai.getScore(state, my) > 0\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countNotInHand(my, \"Duchy\") == 0 \\\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\n             and my.ai.getScore(state, my) > 2\n    \"Province\" if my.ai.countNotInHand(my, \"Province\") > 0\n    \"Estate\"\n  ]\n} \n","RebuildJack":"{\n  name: 'RebuildJack'\n  author: 'ragingduckd', 'SheCantSayNo'\n  requires: ['Rebuild', 'Jack of All Trades']\n  gainPriority: (state, my) -> [\n    \"Province\"\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 2\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 3 and state.countInSupply(\"Rebuild\") == 8\n    \"Duchy\"\n    \"Estate\" if state.gainsToEndGame() <= 1\n    \"Estate\" if state.gainsToEndGame() == 2 and my.ai.getScore(state, my) > -8\n    \"Gold\"\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Rebuild\" if (my.countInDeck(\"Duchy\") > 0 or my.ai.getScore(state, my) > 2)\\\n                and (state.countInSupply(\"Rebuild\") > 2 or my.ai.getScore(state, my) > 3 \\\n                or (state.countInSupply(\"Rebuild\") == 1 and my.ai.getScore(state, my) > 0))\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\n                and my.countInDeck(\"Estate\") == 0 \\\n                and state.countInSupply(\"Duchy\") >= 4\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\n                and state.countInSupply(\"Duchy\") == 0\n    \"Jack of All Trades\" if my.countInDeck(\"Jack of All Trades\") == 0\n    \"Silver\"\n  ]\n\n  getScore: (state, my) -> \n    for status in state.getFinalStatus()\n      [name, score, turns] = status\n      if name == my.ai.toString()\n        myScore = score\n      else\n        opponentScore = score\n    return myScore - opponentScore\n\n  countNotInHand: (my, card) ->\n    return my.countInDeck(card) - my.countInHand(card)\n\n  countInDraw: (my, card) ->\n    return my.countInDeck(card) - my.countInHand(card) - my.countInDiscard(card)\n\n  wantsToRebuild: (state, my) ->\n    answer = 1\n    if state.countInSupply(\"Province\") == 1 \\\n            and my.ai.getScore(state, my) < -4\n              answer = 0\n    else if state.countInSupply(\"Duchy\") == 0 \\\n            and my.ai.countNotInHand(my, \"Duchy\") == 0\\\n            and my.ai.getScore(state, my) < 0\n              answer = 0\n    else if my.getTreasureInHand() > 7 and state.countInSupply(\"Province\") == 1\n              answer = 0\n    else\n          answer = state.countInSupply(\"Province\") > 0\n    return answer\n\n  rebuildPriority: (state, my) -> [\n    \"Province\"\n    \"Duchy\"\n    \"Estate\"\n  ]\n\n  nameVPPriority: (state, my) -> [\n    \"Duchy\" if  state.countInSupply(\"Duchy\") > 0 \\\n            and my.ai.countNotInHand(my, \"Estate\") > 0 \\\n            and (my.ai.countNotInHand(my, \"Province\") == 0 \\\n                or  (my.ai.countInDraw(my, \"Province\") == 0 \\\n                    and my.ai.countInDraw(my, \"Duchy\") > 0 \\\n                    and my.ai.countInDraw(my, \"Estate\") > 0))\n    \"Province\" if my.ai.countInDraw(my, \"Estate\") == 0 \\\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\n               and my.ai.countInDraw(my, \"Province\") > 0\n    \"Province\" if my.ai.countNotInHand(my, \"Estate\") == 0 \\\n               and my.ai.countNotInHand(my, \"Duchy\") > 0 \\\n               and my.ai.countNotInHand(my, \"Province\") > 0\n    \"Estate\" if my.countInHand(\"Rebuild\") + 1 >= state.countInSupply(\"Province\") \\\n             and my.ai.getScore(state, my) > 0\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\n             and my.ai.countInDraw(my, \"Province\") == 0\n    \"Province\" if state.countInSupply(\"Duchy\") == 0 \\\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\n               and my.ai.countInDraw(my, \"Province\") > \\\n               my.ai.countInDraw(my, \"Estate\") \n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\n             and my.ai.countInDraw(my, \"Province\") > 0 \\\n             and my.ai.getScore(state, my) > 2\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countNotInHand(my, \"Estate\") > 0 \\\n             and my.ai.countNotInHand(my, \"Duchy\") < 3 \\\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\n             and my.ai.getScore(state, my) > 4\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.countInDeck(\"Duchy\") == 0 \\\n             and my.ai.getScore(state, my) > 0\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countNotInHand(my, \"Duchy\") == 0 \\\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\n             and my.ai.getScore(state, my) > 2\n    \"Province\" if my.ai.countNotInHand(my, \"Province\") > 0\n    \"Estate\"\n  ]\n} \n","RebuildMonument":"{\n  name: 'RebuildMonument'\n  author: 'ragingduckd', 'SheCantSayNo'\n  requires: ['Rebuild', 'Monument']\n  gainPriority: (state, my) -> [\n    \"Province\"\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 2\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 3 and state.countInSupply(\"Rebuild\") == 8\n    \"Duchy\"\n    \"Estate\" if state.gainsToEndGame() <= 1\n    \"Estate\" if state.gainsToEndGame() == 2 and my.ai.getScore(state, my) > -8\n    \"Gold\"\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Rebuild\" if (my.countInDeck(\"Duchy\") > 0 or my.ai.getScore(state, my) > 2)\\\n                and (state.countInSupply(\"Rebuild\") > 2 or my.ai.getScore(state, my) > 3 \\\n                or (state.countInSupply(\"Rebuild\") == 1 and my.ai.getScore(state, my) > 0))\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\n                and my.countInDeck(\"Estate\") == 0 \\\n                and state.countInSupply(\"Duchy\") >= 4\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\n                and state.countInSupply(\"Duchy\") == 0\n    \"Monument\" if my.countInDeck(\"Monument\") < 2\n    \"Silver\"\n  ]\n\n  getScore: (state, my) -> \n    for status in state.getFinalStatus()\n      [name, score, turns] = status\n      if name == my.ai.toString()\n        myScore = score\n      else\n        opponentScore = score\n    return myScore - opponentScore\n\n  countNotInHand: (my, card) ->\n    return my.countInDeck(card) - my.countInHand(card)\n\n  countInDraw: (my, card) ->\n    return my.countInDeck(card) - my.countInHand(card) - my.countInDiscard(card)\n\n  wantsToRebuild: (state, my) ->\n    if my.countInHand(\"Rebuild\") >= state.countInSupply(\"Province\") \\\n       and my.ai.getScore(state, my) > 0\n          answer = 1\n    else if state.countInSupply(\"Province\") == 1 \\\n            and my.ai.getScore(state, my) < -4\n              answer = 0\n    else if state.countInSupply(\"Duchy\") == 0 \\\n            and my.ai.countNotInHand(my, \"Duchy\") == 0\\\n            and my.ai.getScore(state, my) < 0\n              answer = 0\n    else if my.getTreasureInHand() > 7 and state.countInSupply(\"Province\") == 1\n              answer = 0\n    else\n          answer = state.countInSupply(\"Province\") > 0\n    return answer\n\n  rebuildPriority: (state, my) -> [\n    \"Province\"\n    \"Duchy\"\n    \"Estate\"\n  ]\n\n  nameVPPriority: (state, my) -> [\n    \"Duchy\" if  state.countInSupply(\"Duchy\") > 0 \\\n            and my.ai.countNotInHand(my, \"Estate\") > 0 \\\n            and (my.ai.countNotInHand(my, \"Province\") == 0 \\\n                or  (my.ai.countInDraw(my, \"Province\") == 0 \\\n                    and my.ai.countInDraw(my, \"Duchy\") > 0 \\\n                    and my.ai.countInDraw(my, \"Estate\") > 0))\n    \"Province\" if my.ai.countInDraw(my, \"Estate\") == 0 \\\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\n               and my.ai.countInDraw(my, \"Province\") > 0\n    \"Province\" if my.ai.countNotInHand(my, \"Estate\") == 0 \\\n               and my.ai.countNotInHand(my, \"Duchy\") > 0 \\\n               and my.ai.countNotInHand(my, \"Province\") > 0\n    \"Estate\" if my.countInHand(\"Rebuild\") + 1 >= state.countInSupply(\"Province\") \\\n             and my.ai.getScore(state, my) > 0\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\n             and my.ai.countInDraw(my, \"Province\") == 0\n    \"Province\" if state.countInSupply(\"Duchy\") == 0 \\\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\n               and my.ai.countInDraw(my, \"Province\") > \\\n               my.ai.countInDraw(my, \"Estate\") \n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\n             and my.ai.countInDraw(my, \"Province\") > 0 \\\n             and my.ai.getScore(state, my) > 2\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countNotInHand(my, \"Estate\") > 0 \\\n             and my.ai.countNotInHand(my, \"Duchy\") < 3 \\\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\n             and my.ai.getScore(state, my) > 4\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.countInDeck(\"Duchy\") == 0 \\\n             and my.ai.getScore(state, my) > 0\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\n             and my.ai.countNotInHand(my, \"Duchy\") == 0 \\\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\n             and my.ai.getScore(state, my) > 2\n    \"Province\" if my.ai.countNotInHand(my, \"Province\") > 0\n    \"Estate\"\n  ]\n} ","RebuildRogue":"{\n  name: 'RebuildRogue'\n  author: 'ragingduckd', 'SheCantSayNo'\n  requires: ['Rebuild', 'Rogue']\n  gainPriority: (state, my) -> [\n    \"Province\"    \n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 2\n    \"Rogue\" if my.countInDeck(\"Rogue\") == 0\n    \"Duchy\"\n    \"Rogue\" \n    \"Rebuild\"\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\n             and my.countInDeck(\"Estate\") == 0 \\\n             and my.countInDeck(\"Rebuild\") == 2 \\\n             and state.countInSupply(\"Duchy\") >= 4\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Silver\"\n  ]\n\n  rogueGainValue: (state, card, my) ->\n    if state.gainsToEndGame() <= 4\n      return card.getVP(my)\n    else\n      [coins, potions] = card.getCost(state)\n      return coins\n\n  rogueTrashValue: (state, card, my) ->\n    if state.gainsToEndGame() <= 4\n      return -card.getVP(my.getDeck())\n    else\n      [coins, potions] = card.getCost(state)\n      return -coins\n\n  wantsToRebuild: (state, my) ->\n    return state.countInSupply(\"Province\") > 0\n\n  rebuildPriority: (state, my) -> [\n    \"Province\"\n    \"Duchy\"\n    \"Estate\"\n  ]\n\n  nameVPPriority: (state, my) -> [\n    \"Duchy\" if state.countInSupply(\"Duchy\") > 0 \\\n            and my.countInDeck(\"Estate\") - my.countInHand(\"Estate\") > 0 \\\n            and my.countInDeck(\"Province\") - my.countInHand(\"Province\") < \\\n            (my.countInDeck(\"Estate\") - my.countInHand(\"Estate\"))\n    \"Province\" if my.countInDeck(\"Duchy\") - my.countInHand(\"Duchy\") > 0 \n    \"Estate\"\n  ]\n}\n","Remaker":"{\n  name: 'Remaker'\n  requires: ['Remake']\n  gainPriority: (state, my) -> [\n    \"Province\" if my.countInDeck(\"Gold\") > 0\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Gold\"\n    \"Remake\" if my.countInDeck(\"Remake\") == 0\n    \"Silver\"\n\n    # Some inoffensive $4, $5, and $7 cards, in case it needs them:\n    \"Expand\"\n    \"Laboratory\"\n    \"Caravan\"\n  ]\n}\n","RoyalBigMoney":"{\n  name: 'Royal Big Money'\n  requires: ['Royal Seal']\n  gainPriority: (state, my) -> \n    if state.supply.Colony?\n      [\n        \"Colony\" if my.getTotalMoney() > 32\n        \"Province\" if state.gainsToEndGame() <= 6\n        \"Duchy\" if state.gainsToEndGame() <= 5\n        \"Estate\" if state.gainsToEndGame() <= 2\n        \"Platinum\"\n        \"Province\" if state.countInSupply(\"Colony\") <= 7\n        \"Gold\"\n        \"Duchy\" if state.gainsToEndGame() <= 6\n        \"Royal Seal\"\n        \"Silver\"\n        \"Copper\" if state.gainsToEndGame() <= 2\n      ]\n    else\n      [\n        \"Province\" if my.getTotalMoney() > 18\n        \"Duchy\" if state.gainsToEndGame() <= 4\n        \"Estate\" if state.gainsToEndGame() <= 2\n        \"Gold\"\n        \"Duchy\" if state.gainsToEndGame() <= 6\n        \"Royal Seal\"\n        \"Silver\"\n      ]\n}\n\n","SchemeWitch":"{\n  name: 'SchemeWitch'\n  requires: ['Witch', 'Scheme']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 and my.countInDeck(\"Gold\") > 0\n    \"Witch\" if my.countInDeck(\"Witch\") == 0\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Scheme\" if my.countInDeck('Scheme') < 2 and my.countInDeck('Silver') > 0\n    \"Silver\"\n  ]\n}\n","SillyAI":"# SillyAI's strategy is to buy an arbitrary card with the highest available\n# cost. It does a reasonable job of playing like a newbie, it occasionally\n# gets lucky and pulls off nice combos, and it tests a lot of possible\n# states of the game.\n{\n  name: 'SillyAI'\n  author: 'rspeer'\n  requires: []\n  gainPriority: (state, my) -> []\n  gainValue: (state, card, my) ->\n    if my.turnsTaken > 100 and card isnt null\n      # oh god, just make it stop\n      return 1\n    if card.name is \"Copper\" or card.name is \"Curse\"\n      return -1\n    else\n      [coins, potions] = card.getCost(state)\n      return coins + potions*2 + Math.random()\n}\n","SingleBaron":"{\n  name: 'SingleBaron'\n  requires: ['Baron']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Duchy\" if state.gainsToEndGame() <= 5\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Baron\" if my.countInDeck(\"Baron\") == 0\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 2\n  ]\n  \n  discardPriority: (state, my) -> [\n    \"Colony\"\n    \"Province\"\n    \"Duchy\"\n    \"Curse\"\n    \"Estate\" if my.countInHand(\"Baron\") == 0 \\\n             or my.countInHand(\"Estate\") > 1\n    \"Copper\"\n    \"Baron\" if my.countInHand(\"Estate\") == 0\n    null\n    \"Silver\"\n    \"Estate\"\n    \"Baron\"\n  ]\n\n}\n","SingleWitch":"{\n  name: 'SingleWitch'\n  requires: ['Witch']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 and my.countInDeck(\"Gold\") > 0\n    \"Witch\" if my.countInDeck(\"Witch\") == 0\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Silver\"\n  ]\n}\n","TestPlaza":"{\n  name: 'Plaza'\n  author: 'DStu'\n  requires: [\"Plaza\"]\n  gainPriority: (state, my) -> [\n    \"Province\" \n    \"Duchy\" if state.gainsToEndGame() <= 5\n    \"Estate\" if state.gainsToEndGame() <= 2\n    \"Gold\"\n    \"Plaza\" if my.countInDeck(\"Plaza\") < 3\n    \"Silver\"\n  ]  \n}\n","TournamentPlayer":"{\n  name: \"TournamentPlayer\"\n  author: 'rspeer'\n  requires: ['Tournament']\n  gainPriority: (state, my) -> [\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\n    \"Province\"\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 2\n    \"Followers\"\n    \"Trusty Steed\"\n    \"Bag of Gold\"\n    \"Princess\"\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Diadem\"\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Tournament\"\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n  \n  discardPriority: (state, my) -> [\n    \"Colony\"\n    \"Duchy\"\n    \"Curse\"\n    \"Estate\"\n    \"Province\" if my.countInHand(\"Tournament\") == 0 \\\n               or my.countInHand(\"Province\") > 1\n    \"Copper\"\n    null\n    \"Silver\"\n    \"Gold\"\n  ]\n\n}\n"}
